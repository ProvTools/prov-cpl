all API calls return 1 of the following status codes:
200 - success
400 - invalid arguments
404 - lookup failed
500 - internal error, check logs

GET /provapi/bundle/<id>
gets bundle <id> information
returns:
{
	'name': String,
	'creation_time': Timestamp,
	'creation_session': Long
}


POST /provapi/bundle
creates a new bundle
params:
{
	'name': String
}
returns:
{
	'id': Long
}


POST /provapi/lookup/bundle
looks up a bundle
params:
{
	'name': String
}
returns:
{
	'id': Long
}


POST /provapi/lookup/bundles
looks up multiple bundles
params:
{
	'name': String
}
returns:
{
	'ids': [Long]
}


GET /provapi/bundle/<id>/prefix
	/provapi/bundle/<id>/prefix/<string:prefix>
gets prefixes from bundle <id> 
(optionally with prefix name)
returns:
{
	'prefixes': [{
		'prefix': String,
		'iri': String
	}]
}


POST /provapi/bundle/<id>/prefix
creates a prefix for bundle <id>
params:
{
	'prefix': String,
	'iri': String
}
returns:


GET /provapi/bundle/<id>/property
	/provapi/bundle/<id>/property/<string:prefix>:<string:name>
gets properties from bundle <id> 
(optionally with property prefix:name)
returns:
{
	'properties': [{
		'prefix': String,
		'name': String,
		'value': String
	}]
}

POST /provapi/bundle/<id>/property
creates a property for bundle <id>
params:
{
	'prefix': String,
	'name': String,
	'value': String
}
returns:

GET /provapi/bundle/<id>/objects
gets all objects from bundle <id>
returns:
{
	objects: [{
        'id': Long, 
        'creation_time': Timestamp,
        'prefix': String,
        'name': String,
        'type': enum,
        'bundle': Long
	}]
}

GET /provapi/bundle/<id>/relations
gets all relations from bundle <id>
returns:
{
	relations: [{
		'id': Long,
		'ancestor': Long,
		'descendant': Long,
		'type': enum,
		'bundle': Long,
		'base': Long,
		'other': Long
	}]
}

GET /provapi/object/<id>
gets object <id> information
returns:
{
    'id': Long, 
    'creation_time': Timestamp,
    'prefix': String,
    'name': String,
    'type': enum,
    'bundle': Long
}

POST /provapi/object
creates a new object
params:
{
	'prefix': String,
	'name': String,
	'type': enum,
	'bundle': Long
}
returns:
{
	'id': Long
}

POST /provapi/lookup/object
looks up an object
params:
{
	'prefix': String,
	'name': String,
	'type': enum, (optional)
	'bundle': Long (optional)
}
returns:
{
	'id': Long
}

POST /provapi/lookup/object
looks up multiple objects
params:
{
	'prefix': String,
	'name': String,
	'type': enum, (optional)
	'bundle': Long (optional)
}
returns:
{
	'id': [Long]
}

GET /provapi/object/<id>/property
	/provapi/object/<id>/property/<string:prefix>:<string:property>
gets properties from object <id> 
(optionally with property prefix:name)
returns:
{
	'properties': [{
		'prefix': String,
		'name': String,
		'value': String
	}]
}

POST /provapi/object/<id>/property
creates a property for object <id>
params:
{
	'prefix': String,
	'name': String,
	'value': String
}
returns:

POST /provapi/lookup/object/property
looks up objects by property
param:
{
	'prefix': String,
	'name': String,
	'value': String (optional)
}
returns:
{
	ids: [Long]
}

GET /provapi/object/<id>/ancestors
gets all ancestral relations from object <id>
returns:
{
	relations: [{
		'id': Long,
		'ancestor': Long,
		'descendant': Long,
		'type': enum,
		'bundle': Long,
		'base': Long,
		'other': Long
	}]
}

GET /provapi/object/<id>/descendants
gets all descendent relations to object <id>
returns:
{
	relations: [{
		'id': Long,
		'ancestor': Long,
		'descendant': Long,
		'type': enum,
		'bundle': Long,
		'base': Long,
		'other': Long
	}]
}

POST /provapi/object/<id>/relation
creates a relation to/from object <id>
params:
{
	'dest' OR 'src': Long,
	'type': enum,
	'bundle': Long 
}
returns:
{
	'id': Long
}

GET /provapi/relation/<id>/property
	/provapi/relation/<id>/property/<string:prefix>:<string:name>
gets properties from relation <id> 
(optionally with property prefix:name)
returns:
{
	'properties': [{
		'prefix': String,
		'name': String,
		'value': String
	}]
}

POST /provapi/relation/<id>/property
creates a property for relation <id>
params:
{
	'prefix': String,
	'name': String,
	'value': String
}
returns:

GET /provapi/bundle/<id>/json
exports provenance from bundle <id> as a document
returns:
{
	'JSON': {PROV-JSON Doc}
}

POST /provapi/json
uploads a PROV-JSON file
params:
{
	'JSON': {PROV-JSON Doc},
	'bundle_name': String,
	'anchor_objects': [{
		'id': Long (internal CPL ID)
		'name': String (name of object in document)
	}]
}
