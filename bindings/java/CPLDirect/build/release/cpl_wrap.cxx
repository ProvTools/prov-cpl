/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#include <cpl.h>
#include <cplxx.h>

#include <backends/cpl-odbc.h>

typedef cpl_db_backend_t* p_cpl_db_backend_t;
typedef cpl_session_info_t* p_cpl_session_info_t;
typedef cpl_object_info_t* p_cpl_object_info_t;

inline _cpl_db_backend_t*
cpl_dereference_pp_cpl_db_backend_t(p_cpl_db_backend_t* p) {
    return *p;
}

inline cpl_session_info_t*
cpl_dereference_pp_cpl_session_info_t(p_cpl_session_info_t* p) {
    return *p;
}

inline cpl_object_info_t*
cpl_dereference_pp_cpl_object_info_t(p_cpl_object_info_t* p) {
    return *p;
}

inline cpl_session_info_t**
cpl_convert_pp_cpl_session_info_t(p_cpl_session_info_t* p) {
    return p;
}

inline cpl_object_info_t**
cpl_convert_pp_cpl_object_info_t(p_cpl_object_info_t* p) {
    return p;
}


inline int
cpl_is_ok(cpl_return_t ret) {
    return CPL_IS_OK(ret);
}

typedef std::vector<cpl_id_timestamp_t> std_vector_cpl_id_timestamp_t;

inline std::vector<cpl_id_timestamp_t>&
cpl_dereference_p_std_vector_cpl_id_timestamp_t(
        std_vector_cpl_id_timestamp_t* p) {
    return *p;
}

inline void*
cpl_convert_p_std_vector_cpl_id_timestamp_t_to_p_void(
        std_vector_cpl_id_timestamp_t* p) {
    return (void*) p;
}

/*typedef std::list<cpl_relation_t> std_list_cpl_relation_t;*/
typedef std::vector<cpl_relation_t> std_vector_cpl_relation_t;

inline std::vector<cpl_relation_t>&
cpl_dereference_p_std_vector_cpl_relation_t(
        std_vector_cpl_relation_t* p) {
    return *p;
}

inline void*
cpl_convert_p_std_vector_cpl_relation_t_to_p_void(
        std_vector_cpl_relation_t* p) {
    return (void*) p;
}


typedef std::vector<cplxx_object_info_t> std_vector_cplxx_object_info_t;

inline std::vector<cplxx_object_info_t>&
cpl_dereference_p_std_vector_cplxx_object_info_t(
        std_vector_cplxx_object_info_t* p) {
    return *p;
}

inline void*
cpl_convert_p_std_vector_cplxx_object_info_t_to_p_void(
        std_vector_cplxx_object_info_t* p) {
    return (void*) p;
}

typedef std::vector<cplxx_property_entry_t> std_vector_cplxx_property_entry_t;

inline std::vector<cplxx_property_entry_t>&
cpl_dereference_p_std_vector_cplxx_property_entry_t(
        std_vector_cplxx_property_entry_t* p) {
    return *p;
}

inline void*
cpl_convert_p_std_vector_cplxx_property_entry_t_to_p_void(
        std_vector_cplxx_property_entry_t* p) {
    return (void*) p;
}


typedef std::vector<cpl_id_t> std_vector_cpl_id_t;

inline std::vector<cpl_id_t>&
cpl_dereference_p_std_vector_cpl_id_t(
        std_vector_cpl_id_t* p) {
    return *p;
}

inline void*
cpl_convert_p_std_vector_cpl_id_t_to_p_void(
        std_vector_cpl_id_t* p) {
    return (void*) p;
}


SWIGINTERN std::vector< cpl_id_timestamp >::const_reference std_vector_Sl_cpl_id_timestamp_t_Sg__get(std::vector< cpl_id_timestamp_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cpl_id_timestamp_t_Sg__set(std::vector< cpl_id_timestamp_t > *self,int i,std::vector< cpl_id_timestamp >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cpl_relation >::const_reference std_vector_Sl_cpl_relation_t_Sg__get(std::vector< cpl_relation_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cpl_relation_t_Sg__set(std::vector< cpl_relation_t > *self,int i,std::vector< cpl_relation >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cplxx_object_info >::const_reference std_vector_Sl_cplxx_object_info_t_Sg__get(std::vector< cplxx_object_info_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cplxx_object_info_t_Sg__set(std::vector< cplxx_object_info_t > *self,int i,std::vector< cplxx_object_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< cplxx_property_entry >::const_reference std_vector_Sl_cplxx_property_entry_t_Sg__get(std::vector< cplxx_property_entry_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cplxx_property_entry_t_Sg__set(std::vector< cplxx_property_entry_t > *self,int i,std::vector< cplxx_property_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned long long >::const_reference std_vector_Sl_cpl_id_t_Sg__get(std::vector< cpl_id_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_cpl_id_t_Sg__set(std::vector< cpl_id_t > *self,int i,std::vector< unsigned long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

static p_cpl_db_backend_t *new_cpl_db_backend_tpp() { 
  return new p_cpl_db_backend_t(); 
}

static p_cpl_db_backend_t *copy_cpl_db_backend_tpp(p_cpl_db_backend_t value) { 
  return new p_cpl_db_backend_t(value); 
}

static void delete_cpl_db_backend_tpp(p_cpl_db_backend_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_db_backend_tpp_assign(p_cpl_db_backend_t *obj, p_cpl_db_backend_t value) {
  *obj = value;
}

static p_cpl_db_backend_t cpl_db_backend_tpp_value(p_cpl_db_backend_t *obj) {
  return *obj;
}


static p_cpl_session_info_t *new_cpl_session_info_tpp() { 
  return new p_cpl_session_info_t(); 
}

static p_cpl_session_info_t *copy_cpl_session_info_tpp(p_cpl_session_info_t value) { 
  return new p_cpl_session_info_t(value); 
}

static void delete_cpl_session_info_tpp(p_cpl_session_info_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_session_info_tpp_assign(p_cpl_session_info_t *obj, p_cpl_session_info_t value) {
  *obj = value;
}

static p_cpl_session_info_t cpl_session_info_tpp_value(p_cpl_session_info_t *obj) {
  return *obj;
}


static p_cpl_object_info_t *new_cpl_object_info_tpp() { 
  return new p_cpl_object_info_t(); 
}

static p_cpl_object_info_t *copy_cpl_object_info_tpp(p_cpl_object_info_t value) { 
  return new p_cpl_object_info_t(value); 
}

static void delete_cpl_object_info_tpp(p_cpl_object_info_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_object_info_tpp_assign(p_cpl_object_info_t *obj, p_cpl_object_info_t value) {
  *obj = value;
}

static p_cpl_object_info_t cpl_object_info_tpp_value(p_cpl_object_info_t *obj) {
  return *obj;
}


static cpl_session_t *new_cpl_session_tp() { 
  return new cpl_session_t(); 
}

static cpl_session_t *copy_cpl_session_tp(cpl_session_t value) { 
  return new cpl_session_t(value); 
}

static void delete_cpl_session_tp(cpl_session_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_session_tp_assign(cpl_session_t *obj, cpl_session_t value) {
  *obj = value;
}

static cpl_session_t cpl_session_tp_value(cpl_session_t *obj) {
  return *obj;
}


static cpl_id_t *new_cpl_id_tp() { 
  return new cpl_id_t(); 
}

static cpl_id_t *copy_cpl_id_tp(cpl_id_t value) { 
  return new cpl_id_t(value); 
}

static void delete_cpl_id_tp(cpl_id_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_id_tp_assign(cpl_id_t *obj, cpl_id_t value) {
  *obj = value;
}

static cpl_id_t cpl_id_tp_value(cpl_id_t *obj) {
  return *obj;
}


static cpl_session_info_t *new_cpl_session_info_tp() { 
  return new cpl_session_info_t(); 
}

static cpl_session_info_t *copy_cpl_session_info_tp(cpl_session_info_t value) { 
  return new cpl_session_info_t(value); 
}

static void delete_cpl_session_info_tp(cpl_session_info_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_session_info_tp_assign(cpl_session_info_t *obj, cpl_session_info_t value) {
  *obj = value;
}

static cpl_session_info_t cpl_session_info_tp_value(cpl_session_info_t *obj) {
  return *obj;
}


static cpl_object_info_t *new_cpl_object_info_tp() { 
  return new cpl_object_info_t(); 
}

static cpl_object_info_t *copy_cpl_object_info_tp(cpl_object_info_t value) { 
  return new cpl_object_info_t(value); 
}

static void delete_cpl_object_info_tp(cpl_object_info_t *obj) { 
  if (obj) delete obj; 
}

static void cpl_object_info_tp_assign(cpl_object_info_t *obj, cpl_object_info_t value) {
  *obj = value;
}

static cpl_object_info_t cpl_object_info_tp_value(cpl_object_info_t *obj) {
  return *obj;
}


static std_vector_cpl_id_timestamp_t *new_std_vector_cpl_id_timestamp_tp() { 
  return new std_vector_cpl_id_timestamp_t(); 
}

static std_vector_cpl_id_timestamp_t *copy_std_vector_cpl_id_timestamp_tp(std_vector_cpl_id_timestamp_t value) { 
  return new std_vector_cpl_id_timestamp_t(value); 
}

static void delete_std_vector_cpl_id_timestamp_tp(std_vector_cpl_id_timestamp_t *obj) { 
  if (obj) delete obj; 
}

static void std_vector_cpl_id_timestamp_tp_assign(std_vector_cpl_id_timestamp_t *obj, std_vector_cpl_id_timestamp_t value) {
  *obj = value;
}

static std_vector_cpl_id_timestamp_t std_vector_cpl_id_timestamp_tp_value(std_vector_cpl_id_timestamp_t *obj) {
  return *obj;
}


static std_vector_cpl_relation_t *new_std_vector_cpl_relation_tp() { 
  return new std_vector_cpl_relation_t(); 
}

static std_vector_cpl_relation_t *copy_std_vector_cpl_relation_tp(std_vector_cpl_relation_t value) { 
  return new std_vector_cpl_relation_t(value); 
}

static void delete_std_vector_cpl_relation_tp(std_vector_cpl_relation_t *obj) { 
  if (obj) delete obj; 
}

static void std_vector_cpl_relation_tp_assign(std_vector_cpl_relation_t *obj, std_vector_cpl_relation_t value) {
  *obj = value;
}

static std_vector_cpl_relation_t std_vector_cpl_relation_tp_value(std_vector_cpl_relation_t *obj) {
  return *obj;
}


static std_vector_cplxx_object_info_t *new_std_vector_cplxx_object_info_tp() { 
  return new std_vector_cplxx_object_info_t(); 
}

static std_vector_cplxx_object_info_t *copy_std_vector_cplxx_object_info_tp(std_vector_cplxx_object_info_t value) { 
  return new std_vector_cplxx_object_info_t(value); 
}

static void delete_std_vector_cplxx_object_info_tp(std_vector_cplxx_object_info_t *obj) { 
  if (obj) delete obj; 
}

static void std_vector_cplxx_object_info_tp_assign(std_vector_cplxx_object_info_t *obj, std_vector_cplxx_object_info_t value) {
  *obj = value;
}

static std_vector_cplxx_object_info_t std_vector_cplxx_object_info_tp_value(std_vector_cplxx_object_info_t *obj) {
  return *obj;
}


static std_vector_cplxx_property_entry_t *new_std_vector_cplxx_property_entry_tp() { 
  return new std_vector_cplxx_property_entry_t(); 
}

static std_vector_cplxx_property_entry_t *copy_std_vector_cplxx_property_entry_tp(std_vector_cplxx_property_entry_t value) { 
  return new std_vector_cplxx_property_entry_t(value); 
}

static void delete_std_vector_cplxx_property_entry_tp(std_vector_cplxx_property_entry_t *obj) { 
  if (obj) delete obj; 
}

static void std_vector_cplxx_property_entry_tp_assign(std_vector_cplxx_property_entry_t *obj, std_vector_cplxx_property_entry_t value) {
  *obj = value;
}

static std_vector_cplxx_property_entry_t std_vector_cplxx_property_entry_tp_value(std_vector_cplxx_property_entry_t *obj) {
  return *obj;
}


static std_vector_cpl_id_t *new_std_vector_cpl_id_tp() { 
  return new std_vector_cpl_id_t(); 
}

static std_vector_cpl_id_t *copy_std_vector_cpl_id_tp(std_vector_cpl_id_t value) { 
  return new std_vector_cpl_id_t(value); 
}

static void delete_std_vector_cpl_id_tp(std_vector_cpl_id_t *obj) { 
  if (obj) delete obj; 
}

static void std_vector_cpl_id_tp_assign(std_vector_cpl_id_t *obj, std_vector_cpl_id_t value) {
  *obj = value;
}

static std_vector_cpl_id_t std_vector_cpl_id_tp_value(std_vector_cpl_id_t *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1pp_1cpl_1db_1backend_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_db_backend_t *arg1 = (p_cpl_db_backend_t *) 0 ;
  _cpl_db_backend_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_db_backend_t **)&jarg1; 
  result = (_cpl_db_backend_t *)cpl_dereference_pp_cpl_db_backend_t(arg1);
  *(_cpl_db_backend_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1pp_1cpl_1session_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_session_info_t *arg1 = (p_cpl_session_info_t *) 0 ;
  cpl_session_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_session_info_t **)&jarg1; 
  result = (cpl_session_info_t *)cpl_dereference_pp_cpl_session_info_t(arg1);
  *(cpl_session_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1pp_1cpl_1object_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_object_info_t *arg1 = (p_cpl_object_info_t *) 0 ;
  cpl_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_object_info_t **)&jarg1; 
  result = (cpl_object_info_t *)cpl_dereference_pp_cpl_object_info_t(arg1);
  *(cpl_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1pp_1cpl_1session_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_session_info_t *arg1 = (p_cpl_session_info_t *) 0 ;
  cpl_session_info_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_session_info_t **)&jarg1; 
  result = (cpl_session_info_t **)cpl_convert_pp_cpl_session_info_t(arg1);
  *(cpl_session_info_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1pp_1cpl_1object_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_object_info_t *arg1 = (p_cpl_object_info_t *) 0 ;
  cpl_object_info_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_object_info_t **)&jarg1; 
  result = (cpl_object_info_t **)cpl_convert_pp_cpl_object_info_t(arg1);
  *(cpl_object_info_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1is_1ok(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  cpl_return_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (cpl_return_t)jarg1; 
  result = (int)cpl_is_ok(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_id_timestamp *arg1 = (cpl_id_timestamp *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_id_timestamp **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_id_timestamp *arg1 = (cpl_id_timestamp *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_id_timestamp **)&jarg1; 
  result = (cpl_id_t) ((arg1)->id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cpl_id_timestamp *arg1 = (cpl_id_timestamp *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_id_timestamp **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_id_timestamp *arg1 = (cpl_id_timestamp *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_id_timestamp **)&jarg1; 
  result = (unsigned long) ((arg1)->timestamp);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1id_1timestamp_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_id_timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_id_timestamp *)new cpl_id_timestamp();
  *(cpl_id_timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1id_1timestamp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpl_id_timestamp *arg1 = (cpl_id_timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_id_timestamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  cpl_session_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_session_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_session_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  cpl_session_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (cpl_session_t) ((arg1)->id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1mac_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->mac_address;
    if (arg2) {
      arg1->mac_address = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->mac_address, (const char *)arg2);
    } else {
      arg1->mac_address = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1mac_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (char *) ((arg1)->mac_address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->user;
    if (arg2) {
      arg1->user = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->user, (const char *)arg2);
    } else {
      arg1->user = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (char *) ((arg1)->user);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pid = arg2;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (int) ((arg1)->pid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1program_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->program;
    if (arg2) {
      arg1->program = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->program, (const char *)arg2);
    } else {
      arg1->program = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1program_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (char *) ((arg1)->program);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1cmdline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->cmdline;
    if (arg2) {
      arg1->cmdline = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->cmdline, (const char *)arg2);
    } else {
      arg1->cmdline = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1cmdline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (char *) ((arg1)->cmdline);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1start_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->start_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1t_1start_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info **)&jarg1; 
  result = (unsigned long) ((arg1)->start_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1session_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_session_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_session_info *)new cpl_session_info();
  *(cpl_session_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1session_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpl_session_info *arg1 = (cpl_session_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_session_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (cpl_id_t) ((arg1)->id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1creation_1session_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  cpl_session_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_session_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_session_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->creation_session = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1creation_1session_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  cpl_session_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (cpl_session_t) ((arg1)->creation_session);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1creation_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->creation_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1creation_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (unsigned long) ((arg1)->creation_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1originator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->originator;
    if (arg2) {
      arg1->originator = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->originator, (const char *)arg2);
    } else {
      arg1->originator = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1originator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (char *) ((arg1)->originator);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type;
    if (arg2) {
      arg1->type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type, (const char *)arg2);
    } else {
      arg1->type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (char *) ((arg1)->type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1container_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->container_id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1t_1container_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info **)&jarg1; 
  result = (cpl_id_t) ((arg1)->container_id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1object_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_object_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_object_info *)new cpl_object_info();
  *(cpl_object_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1object_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpl_object_info *arg1 = (cpl_object_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_object_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  result = (cpl_id_t) ((arg1)->id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1query_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->query_object_id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1query_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  result = (cpl_id_t) ((arg1)->query_object_id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1other_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->other_object_id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1other_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  result = (cpl_id_t) ((arg1)->other_object_id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1container_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->container_id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1container_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_relation **)&jarg1; 
  result = (cpl_id_t) ((arg1)->container_id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1relation_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_relation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_relation *)new cpl_relation();
  *(cpl_relation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1relation_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpl_relation *arg1 = (cpl_relation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_relation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_CPL_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_id_t)(cpl_id_t)CPL_NONE;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1attach(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  _cpl_db_backend_t *arg1 = (_cpl_db_backend_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_cpl_db_backend_t **)&jarg1; 
  result = (cpl_return_t)cpl_attach(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1detach(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t)cpl_detach();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1error_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  cpl_return_t arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (cpl_return_t)jarg1; 
  result = (char *)cpl_error_string(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1create_1object_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jlong jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_id_t arg4 ;
  cpl_id_t *arg5 = (cpl_id_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(cpl_id_t **)&jarg5; 
  result = (cpl_return_t)cpl_create_object((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1lookup_1object_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_id_t *arg4 = (cpl_id_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(cpl_id_t **)&jarg4; 
  result = (cpl_return_t)cpl_lookup_object((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1lookup_1object_1ext(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  cpl_id_timestamp_iterator_t arg5 = (cpl_id_timestamp_iterator_t) 0 ;
  void *arg6 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(cpl_id_timestamp_iterator_t *)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (cpl_return_t)cpl_lookup_object_ext((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1lookup_1or_1create_1object_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jlong jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_id_t arg4 ;
  cpl_id_t *arg5 = (cpl_id_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(cpl_id_t **)&jarg5; 
  result = (cpl_return_t)cpl_lookup_or_create_object((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1add_1object_1property(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (cpl_return_t)cpl_add_object_property(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1add_1relation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jobject jarg2, jint jarg3, jobject jarg4, jlong jarg5) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_id_t arg2 ;
  int arg3 ;
  cpl_id_t arg4 ;
  cpl_id_t *arg5 = (cpl_id_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (int)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(cpl_id_t **)&jarg5; 
  result = (cpl_return_t)cpl_add_relation(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1add_1relation_1property(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (cpl_return_t)cpl_add_relation_property(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1current_1session_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  cpl_session_t *arg1 = (cpl_session_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_session_t **)&jarg1; 
  result = (cpl_return_t)cpl_get_current_session(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1session_1info(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2) {
  jint jresult = 0 ;
  cpl_session_t arg1 ;
  cpl_session_info_t **arg2 = (cpl_session_info_t **) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_session_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_session_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = *(cpl_session_info_t ***)&jarg2; 
  result = (cpl_return_t)cpl_get_session_info(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1free_1session_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cpl_session_info_t *arg1 = (cpl_session_info_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info_t **)&jarg1; 
  result = (cpl_return_t)cpl_free_session_info(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1all_1objects(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  cpl_object_info_iterator_t arg2 = (cpl_object_info_iterator_t) 0 ;
  void *arg3 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(cpl_object_info_iterator_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (cpl_return_t)cpl_get_all_objects(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1object_1info(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_object_info_t **arg2 = (cpl_object_info_t **) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = *(cpl_object_info_t ***)&jarg2; 
  result = (cpl_return_t)cpl_get_object_info(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1free_1object_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cpl_object_info_t *arg1 = (cpl_object_info_t *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info_t **)&jarg1; 
  result = (cpl_return_t)cpl_free_object_info(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1object_1relations(JNIEnv *jenv, jclass jcls, jobject jarg1, jint jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  int arg2 ;
  int arg3 ;
  cpl_relation_iterator_t arg4 = (cpl_relation_iterator_t) 0 ;
  void *arg5 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(cpl_relation_iterator_t *)&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (cpl_return_t)cpl_get_object_relations(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1object_1properties(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  char *arg2 = (char *) 0 ;
  cpl_property_iterator_t arg3 = (cpl_property_iterator_t) 0 ;
  void *arg4 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cpl_property_iterator_t *)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (cpl_return_t)cpl_get_object_properties(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1lookup_1object_1by_1property(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  cpl_property_iterator_t arg3 = (cpl_property_iterator_t) 0 ;
  void *arg4 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cpl_property_iterator_t *)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (cpl_return_t)cpl_lookup_object_by_property((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1relation_1properties(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  char *arg2 = (char *) 0 ;
  cpl_property_iterator_t arg3 = (cpl_property_iterator_t) 0 ;
  void *arg4 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cpl_property_iterator_t *)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (cpl_return_t)cpl_get_relation_properties(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1delete_1bundle(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (cpl_return_t)cpl_delete_bundle(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1bundle_1objects(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_object_info_iterator_t arg2 = (cpl_object_info_iterator_t) 0 ;
  void *arg3 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = *(cpl_object_info_iterator_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (cpl_return_t)cpl_get_bundle_objects(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1bundle_1relations(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_relation_iterator_t arg2 = (cpl_relation_iterator_t) 0 ;
  void *arg3 = (void *) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg2 = *(cpl_relation_iterator_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (cpl_return_t)cpl_get_bundle_relations(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1hash_1int64(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  result = cpl_hash_int64(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1hash_1id(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  cpl_id_t arg1 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = cpl_hash_id(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1CPLInitializationHelper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  _cpl_db_backend_t *arg1 = (_cpl_db_backend_t *) 0 ;
  CPLInitializationHelper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_cpl_db_backend_t **)&jarg1; 
  result = (CPLInitializationHelper *)new CPLInitializationHelper(arg1);
  *(CPLInitializationHelper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1CPLInitializationHelper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CPLInitializationHelper *arg1 = (CPLInitializationHelper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CPLInitializationHelper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (cpl_id_t) ((arg1)->id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1creation_1session_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  cpl_session_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_session_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_session_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->creation_session = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1creation_1session_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  cpl_session_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (cpl_session_t) ((arg1)->creation_session);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1creation_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->creation_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1creation_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (unsigned long) ((arg1)->creation_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1originator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->originator = *arg2;
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1originator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (std::string *) & ((arg1)->originator);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (std::string *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1container_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->container_id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1container_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_object_info **)&jarg1; 
  result = (cpl_id_t) ((arg1)->container_id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cplxx_1object_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cplxx_object_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cplxx_object_info *)new cplxx_object_info();
  *(cplxx_object_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cplxx_1object_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cplxx_object_info *arg1 = (cplxx_object_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cplxx_object_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  result = (cpl_id_t) ((arg1)->id);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->key);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->value);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cplxx_1property_1entry_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cplxx_property_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cplxx_property_entry *)new cplxx_property_entry();
  *(cplxx_property_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cplxx_1property_1entry_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cplxx_property_entry *arg1 = (cplxx_property_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cplxx_property_entry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1cb_1collect_1object_1info_1vector_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_return_t (*result)(cpl_object_info_t const *,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t (*)(cpl_object_info_t const *,void *))(cpl_cb_collect_object_info_vector);
  *(cpl_return_t (**)(cpl_object_info_t const *,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1cb_1collect_1id_1timestamp_1vector_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_return_t (*result)(cpl_id_t const,unsigned long const,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t (*)(cpl_id_t const,unsigned long const,void *))(cpl_cb_collect_id_timestamp_vector);
  *(cpl_return_t (**)(cpl_id_t const,unsigned long const,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1cb_1collect_1relation_1list_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_return_t (*result)(cpl_id_t const,cpl_id_t const,cpl_id_t const,int const,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t (*)(cpl_id_t const,cpl_id_t const,cpl_id_t const,int const,void *))(cpl_cb_collect_relation_list);
  *(cpl_return_t (**)(cpl_id_t const,cpl_id_t const,cpl_id_t const,int const,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1cb_1collect_1relation_1vector_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_return_t (*result)(cpl_id_t const,cpl_id_t const,cpl_id_t const,int const,cpl_id_t const,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t (*)(cpl_id_t const,cpl_id_t const,cpl_id_t const,int const,cpl_id_t const,void *))(cpl_cb_collect_relation_vector);
  *(cpl_return_t (**)(cpl_id_t const,cpl_id_t const,cpl_id_t const,int const,cpl_id_t const,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1cb_1collect_1properties_1vector_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_return_t (*result)(cpl_id_t const,char const *,char const *,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t (*)(cpl_id_t const,char const *,char const *,void *))(cpl_cb_collect_properties_vector);
  *(cpl_return_t (**)(cpl_id_t const,char const *,char const *,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1cb_1collect_1property_1lookup_1vector_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_return_t (*result)(cpl_id_t const,char const *,char const *,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_return_t (*)(cpl_id_t const,char const *,char const *,void *))(cpl_cb_collect_property_lookup_vector);
  *(cpl_return_t (**)(cpl_id_t const,char const *,char const *,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1create_1odbc_1backend(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cpl_db_backend_t **arg3 = (cpl_db_backend_t **) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = *(cpl_db_backend_t ***)&jarg3; 
  result = (cpl_return_t)cpl_create_odbc_backend((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1create_1odbc_1backend_1dsn(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cpl_db_backend_t **arg3 = (cpl_db_backend_t **) 0 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = *(cpl_db_backend_t ***)&jarg3; 
  result = (cpl_return_t)cpl_create_odbc_backend_dsn((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1create_1object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_id_t arg4 ;
  unsigned long long *arg5 = (unsigned long long *) 0 ;
  unsigned long long temp5 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp5 = 0;
    if (sz > 0) {
      temp5 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp5 = (temp5 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg5 = &temp5;
  }
  result = (cpl_return_t)cpl_create_object((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1lookup_1object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long long *arg4 = (unsigned long long *) 0 ;
  unsigned long long temp4 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp4 = 0;
    if (sz > 0) {
      temp4 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp4 = (temp4 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg4 = &temp4;
  }
  result = (cpl_return_t)cpl_lookup_object((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1lookup_1or_1create_1object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cpl_id_t arg4 ;
  unsigned long long *arg5 = (unsigned long long *) 0 ;
  unsigned long long temp5 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp5 = 0;
    if (sz > 0) {
      temp5 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp5 = (temp5 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg5 = &temp5;
  }
  result = (cpl_return_t)cpl_lookup_or_create_object((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1add_1relation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1, jobject jarg2, jint jarg3, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_id_t arg2 ;
  int arg3 ;
  cpl_id_t arg4 ;
  unsigned long long *arg5 = (unsigned long long *) 0 ;
  unsigned long long temp5 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (int)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (cpl_id_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (cpl_id_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp5 = 0;
    if (sz > 0) {
      temp5 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp5 = (temp5 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg5 = &temp5;
  }
  result = (cpl_return_t)cpl_add_relation(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1get_1current_1session_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long temp1 ;
  cpl_return_t result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    if (sz > 0) {
      temp1 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp1 = (temp1 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  result = (cpl_return_t)cpl_get_current_session(arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1id_1timestamp_1t_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cpl_id_timestamp_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< cpl_id_timestamp_t > *)new std::vector< cpl_id_timestamp_t >();
  *(std::vector< cpl_id_timestamp_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1id_1timestamp_1t_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< cpl_id_timestamp >::size_type arg1 ;
  std::vector< cpl_id_timestamp_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< cpl_id_timestamp >::size_type)jarg1; 
  result = (std::vector< cpl_id_timestamp_t > *)new std::vector< cpl_id_timestamp_t >(arg1);
  *(std::vector< cpl_id_timestamp_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  std::vector< cpl_id_timestamp >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  result = ((std::vector< cpl_id_timestamp_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  std::vector< cpl_id_timestamp >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  result = ((std::vector< cpl_id_timestamp_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  std::vector< cpl_id_timestamp >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  arg2 = (std::vector< cpl_id_timestamp >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  result = (bool)((std::vector< cpl_id_timestamp_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  std::vector< cpl_id_timestamp >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  arg2 = *(std::vector< cpl_id_timestamp >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cpl_id_timestamp >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< cpl_id_timestamp >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  int arg2 ;
  std::vector< cpl_id_timestamp >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< cpl_id_timestamp >::value_type *) &std_vector_Sl_cpl_id_timestamp_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< cpl_id_timestamp >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1timestamp_1t_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  int arg2 ;
  std::vector< cpl_id_timestamp >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cpl_id_timestamp >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cpl_id_timestamp >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_cpl_id_timestamp_t_Sg__set(arg1,arg2,(cpl_id_timestamp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1id_1timestamp_1t_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cpl_id_timestamp_t > *arg1 = (std::vector< cpl_id_timestamp_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cpl_id_timestamp_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1p_1std_1vector_1cpl_1id_1timestamp_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_timestamp_t *arg1 = (std_vector_cpl_id_timestamp_t *) 0 ;
  std::vector< cpl_id_timestamp_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_timestamp_t **)&jarg1; 
  result = (std::vector< cpl_id_timestamp_t > *) &cpl_dereference_p_std_vector_cpl_id_timestamp_t(arg1);
  *(std::vector< cpl_id_timestamp_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1p_1std_1vector_1cpl_1id_1timestamp_1t_1to_1p_1void(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_timestamp_t *arg1 = (std_vector_cpl_id_timestamp_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_timestamp_t **)&jarg1; 
  result = (void *)cpl_convert_p_std_vector_cpl_id_timestamp_t_to_p_void(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1relation_1t_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cpl_relation_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< cpl_relation_t > *)new std::vector< cpl_relation_t >();
  *(std::vector< cpl_relation_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1relation_1t_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< cpl_relation >::size_type arg1 ;
  std::vector< cpl_relation_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< cpl_relation >::size_type)jarg1; 
  result = (std::vector< cpl_relation_t > *)new std::vector< cpl_relation_t >(arg1);
  *(std::vector< cpl_relation_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  std::vector< cpl_relation >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  result = ((std::vector< cpl_relation_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  std::vector< cpl_relation >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  result = ((std::vector< cpl_relation_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  std::vector< cpl_relation >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  arg2 = (std::vector< cpl_relation >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  result = (bool)((std::vector< cpl_relation_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  std::vector< cpl_relation >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  arg2 = *(std::vector< cpl_relation >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cpl_relation >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< cpl_relation >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  int arg2 ;
  std::vector< cpl_relation >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< cpl_relation >::value_type *) &std_vector_Sl_cpl_relation_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< cpl_relation >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1relation_1t_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  int arg2 ;
  std::vector< cpl_relation >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cpl_relation >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cpl_relation >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_cpl_relation_t_Sg__set(arg1,arg2,(cpl_relation const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1relation_1t_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cpl_relation_t > *arg1 = (std::vector< cpl_relation_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cpl_relation_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1p_1std_1vector_1cpl_1relation_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_relation_t *arg1 = (std_vector_cpl_relation_t *) 0 ;
  std::vector< cpl_relation_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_relation_t **)&jarg1; 
  result = (std::vector< cpl_relation_t > *) &cpl_dereference_p_std_vector_cpl_relation_t(arg1);
  *(std::vector< cpl_relation_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1p_1std_1vector_1cpl_1relation_1t_1to_1p_1void(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_relation_t *arg1 = (std_vector_cpl_relation_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_relation_t **)&jarg1; 
  result = (void *)cpl_convert_p_std_vector_cpl_relation_t_to_p_void(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cplxx_1object_1info_1t_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cplxx_object_info_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< cplxx_object_info_t > *)new std::vector< cplxx_object_info_t >();
  *(std::vector< cplxx_object_info_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cplxx_1object_1info_1t_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< cplxx_object_info >::size_type arg1 ;
  std::vector< cplxx_object_info_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< cplxx_object_info >::size_type)jarg1; 
  result = (std::vector< cplxx_object_info_t > *)new std::vector< cplxx_object_info_t >(arg1);
  *(std::vector< cplxx_object_info_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  std::vector< cplxx_object_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  result = ((std::vector< cplxx_object_info_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  std::vector< cplxx_object_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  result = ((std::vector< cplxx_object_info_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  std::vector< cplxx_object_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  arg2 = (std::vector< cplxx_object_info >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  result = (bool)((std::vector< cplxx_object_info_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  std::vector< cplxx_object_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  arg2 = *(std::vector< cplxx_object_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cplxx_object_info >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< cplxx_object_info >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  int arg2 ;
  std::vector< cplxx_object_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< cplxx_object_info >::value_type *) &std_vector_Sl_cplxx_object_info_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< cplxx_object_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1object_1info_1t_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  int arg2 ;
  std::vector< cplxx_object_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cplxx_object_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cplxx_object_info >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_cplxx_object_info_t_Sg__set(arg1,arg2,(cplxx_object_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cplxx_1object_1info_1t_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cplxx_object_info_t > *arg1 = (std::vector< cplxx_object_info_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cplxx_object_info_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1p_1std_1vector_1cplxx_1object_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_object_info_t *arg1 = (std_vector_cplxx_object_info_t *) 0 ;
  std::vector< cplxx_object_info_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_object_info_t **)&jarg1; 
  result = (std::vector< cplxx_object_info_t > *) &cpl_dereference_p_std_vector_cplxx_object_info_t(arg1);
  *(std::vector< cplxx_object_info_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1p_1std_1vector_1cplxx_1object_1info_1t_1to_1p_1void(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_object_info_t *arg1 = (std_vector_cplxx_object_info_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_object_info_t **)&jarg1; 
  result = (void *)cpl_convert_p_std_vector_cplxx_object_info_t_to_p_void(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cplxx_1property_1entry_1t_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cplxx_property_entry_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< cplxx_property_entry_t > *)new std::vector< cplxx_property_entry_t >();
  *(std::vector< cplxx_property_entry_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cplxx_1property_1entry_1t_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< cplxx_property_entry >::size_type arg1 ;
  std::vector< cplxx_property_entry_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< cplxx_property_entry >::size_type)jarg1; 
  result = (std::vector< cplxx_property_entry_t > *)new std::vector< cplxx_property_entry_t >(arg1);
  *(std::vector< cplxx_property_entry_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  std::vector< cplxx_property_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  result = ((std::vector< cplxx_property_entry_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  std::vector< cplxx_property_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  result = ((std::vector< cplxx_property_entry_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  std::vector< cplxx_property_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  arg2 = (std::vector< cplxx_property_entry >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  result = (bool)((std::vector< cplxx_property_entry_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  std::vector< cplxx_property_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  arg2 = *(std::vector< cplxx_property_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cplxx_property_entry >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< cplxx_property_entry >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  int arg2 ;
  std::vector< cplxx_property_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< cplxx_property_entry >::value_type *) &std_vector_Sl_cplxx_property_entry_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< cplxx_property_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cplxx_1property_1entry_1t_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  int arg2 ;
  std::vector< cplxx_property_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< cplxx_property_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< cplxx_property_entry >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_cplxx_property_entry_t_Sg__set(arg1,arg2,(cplxx_property_entry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cplxx_1property_1entry_1t_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cplxx_property_entry_t > *arg1 = (std::vector< cplxx_property_entry_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cplxx_property_entry_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1p_1std_1vector_1cplxx_1property_1entry_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_property_entry_t *arg1 = (std_vector_cplxx_property_entry_t *) 0 ;
  std::vector< cplxx_property_entry_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_property_entry_t **)&jarg1; 
  result = (std::vector< cplxx_property_entry_t > *) &cpl_dereference_p_std_vector_cplxx_property_entry_t(arg1);
  *(std::vector< cplxx_property_entry_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1p_1std_1vector_1cplxx_1property_1entry_1t_1to_1p_1void(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_property_entry_t *arg1 = (std_vector_cplxx_property_entry_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_property_entry_t **)&jarg1; 
  result = (void *)cpl_convert_p_std_vector_cplxx_property_entry_t_to_p_void(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1id_1t_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< cpl_id_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< cpl_id_t > *)new std::vector< cpl_id_t >();
  *(std::vector< cpl_id_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1id_1t_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned long long >::size_type arg1 ;
  std::vector< cpl_id_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned long long >::size_type)jarg1; 
  result = (std::vector< cpl_id_t > *)new std::vector< cpl_id_t >(arg1);
  *(std::vector< cpl_id_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  result = ((std::vector< cpl_id_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  result = ((std::vector< cpl_id_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  std::vector< unsigned long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  arg2 = (std::vector< unsigned long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  result = (bool)((std::vector< cpl_id_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  std::vector< unsigned long long >::value_type *arg2 = 0 ;
  std::vector< unsigned long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = &temp2;
    temp2 = 0;
    if (sz > 0) {
      temp2 = (std::vector< unsigned long long >::value_type)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp2 = (temp2 << 8) | (std::vector< unsigned long long >::value_type)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->push_back((std::vector< unsigned long long >::value_type const &)*arg2);
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long >::value_type *) &std_vector_Sl_cpl_id_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(*result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1t_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *arg3 = 0 ;
  std::vector< unsigned long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = &temp3;
    temp3 = 0;
    if (sz > 0) {
      temp3 = (std::vector< unsigned long long >::value_type)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        temp3 = (temp3 << 8) | (std::vector< unsigned long long >::value_type)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  try {
    std_vector_Sl_cpl_id_t_Sg__set(arg1,arg2,(unsigned long long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1id_1t_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cpl_id_t > *arg1 = (std::vector< cpl_id_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< cpl_id_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1dereference_1p_1std_1vector_1cpl_1id_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_t *arg1 = (std_vector_cpl_id_t *) 0 ;
  std::vector< cpl_id_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_t **)&jarg1; 
  result = (std::vector< cpl_id_t > *) &cpl_dereference_p_std_vector_cpl_id_t(arg1);
  *(std::vector< cpl_id_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1convert_1p_1std_1vector_1cpl_1id_1t_1to_1p_1void(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_t *arg1 = (std_vector_cpl_id_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_t **)&jarg1; 
  result = (void *)cpl_convert_p_std_vector_cpl_id_t_to_p_void(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1db_1backend_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  p_cpl_db_backend_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (p_cpl_db_backend_t *)new_cpl_db_backend_tpp();
  *(p_cpl_db_backend_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1db_1backend_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_db_backend_t arg1 ;
  p_cpl_db_backend_t *argp1 ;
  p_cpl_db_backend_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(p_cpl_db_backend_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null p_cpl_db_backend_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (p_cpl_db_backend_t *)copy_cpl_db_backend_tpp(arg1);
  *(p_cpl_db_backend_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1db_1backend_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  p_cpl_db_backend_t *arg1 = (p_cpl_db_backend_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_db_backend_t **)&jarg1; 
  delete_cpl_db_backend_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1db_1backend_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  p_cpl_db_backend_t *arg1 = (p_cpl_db_backend_t *) 0 ;
  p_cpl_db_backend_t arg2 ;
  p_cpl_db_backend_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_db_backend_t **)&jarg1; 
  argp2 = *(p_cpl_db_backend_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null p_cpl_db_backend_t");
    return ;
  }
  arg2 = *argp2; 
  cpl_db_backend_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1db_1backend_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_db_backend_t *arg1 = (p_cpl_db_backend_t *) 0 ;
  p_cpl_db_backend_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_db_backend_t **)&jarg1; 
  result = cpl_db_backend_tpp_value(arg1);
  *(p_cpl_db_backend_t **)&jresult = new p_cpl_db_backend_t((const p_cpl_db_backend_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1session_1info_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  p_cpl_session_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (p_cpl_session_info_t *)new_cpl_session_info_tpp();
  *(p_cpl_session_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1session_1info_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_session_info_t arg1 ;
  p_cpl_session_info_t *argp1 ;
  p_cpl_session_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(p_cpl_session_info_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null p_cpl_session_info_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (p_cpl_session_info_t *)copy_cpl_session_info_tpp(arg1);
  *(p_cpl_session_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1session_1info_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  p_cpl_session_info_t *arg1 = (p_cpl_session_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_session_info_t **)&jarg1; 
  delete_cpl_session_info_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  p_cpl_session_info_t *arg1 = (p_cpl_session_info_t *) 0 ;
  p_cpl_session_info_t arg2 ;
  p_cpl_session_info_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_session_info_t **)&jarg1; 
  argp2 = *(p_cpl_session_info_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null p_cpl_session_info_t");
    return ;
  }
  arg2 = *argp2; 
  cpl_session_info_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_session_info_t *arg1 = (p_cpl_session_info_t *) 0 ;
  p_cpl_session_info_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_session_info_t **)&jarg1; 
  result = cpl_session_info_tpp_value(arg1);
  *(p_cpl_session_info_t **)&jresult = new p_cpl_session_info_t((const p_cpl_session_info_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1object_1info_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  p_cpl_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (p_cpl_object_info_t *)new_cpl_object_info_tpp();
  *(p_cpl_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1object_1info_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_object_info_t arg1 ;
  p_cpl_object_info_t *argp1 ;
  p_cpl_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(p_cpl_object_info_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null p_cpl_object_info_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (p_cpl_object_info_t *)copy_cpl_object_info_tpp(arg1);
  *(p_cpl_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1object_1info_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  p_cpl_object_info_t *arg1 = (p_cpl_object_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_object_info_t **)&jarg1; 
  delete_cpl_object_info_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  p_cpl_object_info_t *arg1 = (p_cpl_object_info_t *) 0 ;
  p_cpl_object_info_t arg2 ;
  p_cpl_object_info_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_object_info_t **)&jarg1; 
  argp2 = *(p_cpl_object_info_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null p_cpl_object_info_t");
    return ;
  }
  arg2 = *argp2; 
  cpl_object_info_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  p_cpl_object_info_t *arg1 = (p_cpl_object_info_t *) 0 ;
  p_cpl_object_info_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(p_cpl_object_info_t **)&jarg1; 
  result = cpl_object_info_tpp_value(arg1);
  *(p_cpl_object_info_t **)&jresult = new p_cpl_object_info_t((const p_cpl_object_info_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1session_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_session_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_session_t *)new_cpl_session_tp();
  *(cpl_session_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1session_1tp(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  cpl_session_t arg1 ;
  cpl_session_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_session_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_session_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (cpl_session_t *)copy_cpl_session_tp(arg1);
  *(cpl_session_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1session_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpl_session_t *arg1 = (cpl_session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_session_t **)&jarg1; 
  delete_cpl_session_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  cpl_session_t *arg1 = (cpl_session_t *) 0 ;
  cpl_session_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_session_t **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_session_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_session_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  cpl_session_tp_assign(arg1,arg2);
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  cpl_session_t *arg1 = (cpl_session_t *) 0 ;
  cpl_session_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_session_t **)&jarg1; 
  result = (cpl_session_t)cpl_session_tp_value(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1id_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_id_t *)new_cpl_id_tp();
  *(cpl_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1id_1tp(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  cpl_id_t arg1 ;
  cpl_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (cpl_id_t *)copy_cpl_id_tp(arg1);
  *(cpl_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1id_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpl_id_t *arg1 = (cpl_id_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_id_t **)&jarg1; 
  delete_cpl_id_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  cpl_id_t *arg1 = (cpl_id_t *) 0 ;
  cpl_id_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_id_t **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (cpl_id_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (cpl_id_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  cpl_id_tp_assign(arg1,arg2);
}


SWIGEXPORT jobject JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1id_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  cpl_id_t *arg1 = (cpl_id_t *) 0 ;
  cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpl_id_t **)&jarg1; 
  result = (cpl_id_t)cpl_id_tp_value(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1session_1info_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_session_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_session_info_t *)new_cpl_session_info_tp();
  *(cpl_session_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1session_1info_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_session_info_t arg1 ;
  cpl_session_info_t *argp1 ;
  cpl_session_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cpl_session_info_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cpl_session_info_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (cpl_session_info_t *)copy_cpl_session_info_tp(arg1);
  *(cpl_session_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1session_1info_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cpl_session_info_t *arg1 = (cpl_session_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info_t **)&jarg1; 
  delete_cpl_session_info_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cpl_session_info_t *arg1 = (cpl_session_info_t *) 0 ;
  cpl_session_info_t arg2 ;
  cpl_session_info_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cpl_session_info_t **)&jarg1; 
  argp2 = *(cpl_session_info_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cpl_session_info_t");
    return ;
  }
  arg2 = *argp2; 
  cpl_session_info_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1session_1info_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_session_info_t *arg1 = (cpl_session_info_t *) 0 ;
  cpl_session_info_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_session_info_t **)&jarg1; 
  result = cpl_session_info_tp_value(arg1);
  *(cpl_session_info_t **)&jresult = new cpl_session_info_t((const cpl_session_info_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1cpl_1object_1info_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpl_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpl_object_info_t *)new_cpl_object_info_tp();
  *(cpl_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1cpl_1object_1info_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_object_info_t arg1 ;
  cpl_object_info_t *argp1 ;
  cpl_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cpl_object_info_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cpl_object_info_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (cpl_object_info_t *)copy_cpl_object_info_tp(arg1);
  *(cpl_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1cpl_1object_1info_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cpl_object_info_t *arg1 = (cpl_object_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info_t **)&jarg1; 
  delete_cpl_object_info_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cpl_object_info_t *arg1 = (cpl_object_info_t *) 0 ;
  cpl_object_info_t arg2 ;
  cpl_object_info_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cpl_object_info_t **)&jarg1; 
  argp2 = *(cpl_object_info_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cpl_object_info_t");
    return ;
  }
  arg2 = *argp2; 
  cpl_object_info_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_cpl_1object_1info_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpl_object_info_t *arg1 = (cpl_object_info_t *) 0 ;
  cpl_object_info_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpl_object_info_t **)&jarg1; 
  result = cpl_object_info_tp_value(arg1);
  *(cpl_object_info_t **)&jresult = new cpl_object_info_t((const cpl_object_info_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1std_1vector_1cpl_1id_1timestamp_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std_vector_cpl_id_timestamp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std_vector_cpl_id_timestamp_t *)new_std_vector_cpl_id_timestamp_tp();
  *(std_vector_cpl_id_timestamp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1std_1vector_1cpl_1id_1timestamp_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_timestamp_t arg1 ;
  std_vector_cpl_id_timestamp_t *argp1 ;
  std_vector_cpl_id_timestamp_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std_vector_cpl_id_timestamp_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cpl_id_timestamp_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (std_vector_cpl_id_timestamp_t *)copy_std_vector_cpl_id_timestamp_tp(arg1);
  *(std_vector_cpl_id_timestamp_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1std_1vector_1cpl_1id_1timestamp_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std_vector_cpl_id_timestamp_t *arg1 = (std_vector_cpl_id_timestamp_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_timestamp_t **)&jarg1; 
  delete_std_vector_cpl_id_timestamp_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cpl_1id_1timestamp_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std_vector_cpl_id_timestamp_t *arg1 = (std_vector_cpl_id_timestamp_t *) 0 ;
  std_vector_cpl_id_timestamp_t arg2 ;
  std_vector_cpl_id_timestamp_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_timestamp_t **)&jarg1; 
  argp2 = *(std_vector_cpl_id_timestamp_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cpl_id_timestamp_t");
    return ;
  }
  arg2 = *argp2; 
  std_vector_cpl_id_timestamp_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cpl_1id_1timestamp_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_timestamp_t *arg1 = (std_vector_cpl_id_timestamp_t *) 0 ;
  std_vector_cpl_id_timestamp_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_timestamp_t **)&jarg1; 
  result = std_vector_cpl_id_timestamp_tp_value(arg1);
  *(std_vector_cpl_id_timestamp_t **)&jresult = new std_vector_cpl_id_timestamp_t((const std_vector_cpl_id_timestamp_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1std_1vector_1cpl_1relation_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std_vector_cpl_relation_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std_vector_cpl_relation_t *)new_std_vector_cpl_relation_tp();
  *(std_vector_cpl_relation_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1std_1vector_1cpl_1relation_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_relation_t arg1 ;
  std_vector_cpl_relation_t *argp1 ;
  std_vector_cpl_relation_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std_vector_cpl_relation_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cpl_relation_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (std_vector_cpl_relation_t *)copy_std_vector_cpl_relation_tp(arg1);
  *(std_vector_cpl_relation_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1std_1vector_1cpl_1relation_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std_vector_cpl_relation_t *arg1 = (std_vector_cpl_relation_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_relation_t **)&jarg1; 
  delete_std_vector_cpl_relation_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cpl_1relation_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std_vector_cpl_relation_t *arg1 = (std_vector_cpl_relation_t *) 0 ;
  std_vector_cpl_relation_t arg2 ;
  std_vector_cpl_relation_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_relation_t **)&jarg1; 
  argp2 = *(std_vector_cpl_relation_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cpl_relation_t");
    return ;
  }
  arg2 = *argp2; 
  std_vector_cpl_relation_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cpl_1relation_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_relation_t *arg1 = (std_vector_cpl_relation_t *) 0 ;
  std_vector_cpl_relation_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_relation_t **)&jarg1; 
  result = std_vector_cpl_relation_tp_value(arg1);
  *(std_vector_cpl_relation_t **)&jresult = new std_vector_cpl_relation_t((const std_vector_cpl_relation_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1std_1vector_1cplxx_1object_1info_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std_vector_cplxx_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std_vector_cplxx_object_info_t *)new_std_vector_cplxx_object_info_tp();
  *(std_vector_cplxx_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1std_1vector_1cplxx_1object_1info_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_object_info_t arg1 ;
  std_vector_cplxx_object_info_t *argp1 ;
  std_vector_cplxx_object_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std_vector_cplxx_object_info_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cplxx_object_info_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (std_vector_cplxx_object_info_t *)copy_std_vector_cplxx_object_info_tp(arg1);
  *(std_vector_cplxx_object_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1std_1vector_1cplxx_1object_1info_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std_vector_cplxx_object_info_t *arg1 = (std_vector_cplxx_object_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_object_info_t **)&jarg1; 
  delete_std_vector_cplxx_object_info_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cplxx_1object_1info_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std_vector_cplxx_object_info_t *arg1 = (std_vector_cplxx_object_info_t *) 0 ;
  std_vector_cplxx_object_info_t arg2 ;
  std_vector_cplxx_object_info_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_object_info_t **)&jarg1; 
  argp2 = *(std_vector_cplxx_object_info_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cplxx_object_info_t");
    return ;
  }
  arg2 = *argp2; 
  std_vector_cplxx_object_info_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cplxx_1object_1info_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_object_info_t *arg1 = (std_vector_cplxx_object_info_t *) 0 ;
  std_vector_cplxx_object_info_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_object_info_t **)&jarg1; 
  result = std_vector_cplxx_object_info_tp_value(arg1);
  *(std_vector_cplxx_object_info_t **)&jresult = new std_vector_cplxx_object_info_t((const std_vector_cplxx_object_info_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1std_1vector_1cplxx_1property_1entry_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std_vector_cplxx_property_entry_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std_vector_cplxx_property_entry_t *)new_std_vector_cplxx_property_entry_tp();
  *(std_vector_cplxx_property_entry_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1std_1vector_1cplxx_1property_1entry_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_property_entry_t arg1 ;
  std_vector_cplxx_property_entry_t *argp1 ;
  std_vector_cplxx_property_entry_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std_vector_cplxx_property_entry_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cplxx_property_entry_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (std_vector_cplxx_property_entry_t *)copy_std_vector_cplxx_property_entry_tp(arg1);
  *(std_vector_cplxx_property_entry_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1std_1vector_1cplxx_1property_1entry_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std_vector_cplxx_property_entry_t *arg1 = (std_vector_cplxx_property_entry_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_property_entry_t **)&jarg1; 
  delete_std_vector_cplxx_property_entry_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cplxx_1property_1entry_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std_vector_cplxx_property_entry_t *arg1 = (std_vector_cplxx_property_entry_t *) 0 ;
  std_vector_cplxx_property_entry_t arg2 ;
  std_vector_cplxx_property_entry_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_property_entry_t **)&jarg1; 
  argp2 = *(std_vector_cplxx_property_entry_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cplxx_property_entry_t");
    return ;
  }
  arg2 = *argp2; 
  std_vector_cplxx_property_entry_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cplxx_1property_1entry_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cplxx_property_entry_t *arg1 = (std_vector_cplxx_property_entry_t *) 0 ;
  std_vector_cplxx_property_entry_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cplxx_property_entry_t **)&jarg1; 
  result = std_vector_cplxx_property_entry_tp_value(arg1);
  *(std_vector_cplxx_property_entry_t **)&jresult = new std_vector_cplxx_property_entry_t((const std_vector_cplxx_property_entry_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_new_1std_1vector_1cpl_1id_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std_vector_cpl_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std_vector_cpl_id_t *)new_std_vector_cpl_id_tp();
  *(std_vector_cpl_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_copy_1std_1vector_1cpl_1id_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_t arg1 ;
  std_vector_cpl_id_t *argp1 ;
  std_vector_cpl_id_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std_vector_cpl_id_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cpl_id_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (std_vector_cpl_id_t *)copy_std_vector_cpl_id_tp(arg1);
  *(std_vector_cpl_id_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_delete_1std_1vector_1cpl_1id_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std_vector_cpl_id_t *arg1 = (std_vector_cpl_id_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_t **)&jarg1; 
  delete_std_vector_cpl_id_tp(arg1);
}


SWIGEXPORT void JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cpl_1id_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std_vector_cpl_id_t *arg1 = (std_vector_cpl_id_t *) 0 ;
  std_vector_cpl_id_t arg2 ;
  std_vector_cpl_id_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_t **)&jarg1; 
  argp2 = *(std_vector_cpl_id_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std_vector_cpl_id_t");
    return ;
  }
  arg2 = *argp2; 
  std_vector_cpl_id_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_swig_direct_CPLDirect_CPLDirectJNI_std_1vector_1cpl_1id_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std_vector_cpl_id_t *arg1 = (std_vector_cpl_id_t *) 0 ;
  std_vector_cpl_id_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_vector_cpl_id_t **)&jarg1; 
  result = std_vector_cpl_id_tp_value(arg1);
  *(std_vector_cpl_id_t **)&jresult = new std_vector_cpl_id_t((const std_vector_cpl_id_t &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

